<?php//// Конттроллер страниц.//class C_Menu extends C_Admin_Base{	//	// Конструктор.	//	public function __construct(){		parent::__construct();	}		public function before(){		parent::before();	}		public function action_index()	{		$this->title .= ' :: Меню';				// получение номера страницы		$page_num = isset($this->params[2]) ? (int)$this->params[2] : 1;				// создание объекта постраничной навигации (обязательные параметры)		$mPagination = new M_Pagination('menu', '/menu/index/');		// задание свойств объекта		$pages = $mPagination->on_page(4)->page_num($page_num)->page();				// получение html-кода панели навигации		$navbar = $this->Template('v/v_navbar.php', array('navparams' => $mPagination->navparams()));				// формирование контента страницы		$this->content = $this->Template('v/menu/v_all.php', array('menu' => $pages,																 'navparams' => $mPagination->navparams(),																 'navbar' => $navbar));	}	    public function action_add(){        $this->title .= '::Добавление менюшки';        $this->scripts[] = 'main';        $this->scripts[] = 'sortable';                $fields = array('pages' => array());        $mMenu = M_Menu::Instance();        $messages = array();                 if($this->isPost())                {              if($id_menu = $mMenu->add($_POST))                $this->redirect("/menu");                        $fields = $_POST;            $messages = $mMenu->errors();        }                $this->content = $this->Template('v/menu/v_add.php', array('fields' => $fields,                        'messages' => $messages, 'map' => M_Pages::Instance()->make_tree()));                             }		public function action_edit(){		$this->title .= ' :: Редактирование меню';        $this->scripts[] = 'main';        $this->scripts[] = 'sortable';		$mMenu = M_Menu::Instance();		$messages = array(); 				if($this->isPost())		{			if($mMenu->edit($this->params[2], $_POST))				$this->redirect("/menu");						$fields = $_POST;			$messages = $mMenu->errors();		}		else		{			$fields = $mMenu->get($this->params[2]);		    $menu_pages = $mMenu->getWithPages($this->params[2]);        }		if(!isset($fields['pages']))			$fields['pages'] = array();				$this->content = $this->Template('v/menu/v_edit.php',	                                      array('fields' => $fields,                                                'menu_pages'=> $menu_pages,                        						'messages' => $messages,                        						'map' => M_Pages::Instance()->make_tree()));				}		public function action_delete()		{			M_Menu::Instance()->delete($this->params[2]);			$this->redirect('/menu');		}		public function action_sort(){		$this->title .= ' :: Сортировка меню';		$this->scripts[] = 'sortable';		$mMenu = M_Menu::Instance();				if($this->isPost())		{			$mMenu->sorting($_POST['id_menu'], $_POST['pages']);			$this->redirect('/menu');		}				$this->content = $this->Template('v/menu/v_sort.php', 					array('menu' => $mMenu->getWithPages($this->params[2]),						'id_menu' => $this->params[2]));		}}